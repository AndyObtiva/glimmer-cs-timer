require 'puts_debuggerer'
require_relative '../lib/glimmer-cs-timer'

include Glimmer

# TODO if the app has just been launched from the client (not just as a service), then display shell right away without hiding first

# Asynchronous multi-threaded Glimmer SWT proxy that
# enables druby interactions while an app is running
module Glimmer::SWT::AsyncProxy
  include Glimmer
  attr_reader :proxy
  
  def initialize(proxy)
    @proxy = proxy
  end
  
  def heartbeat
    @heartbeat = Time.now.utc
  end
  
  def async(&operation)
    Thread.new {
      async_exec {
        begin
          operation.call
        rescue => e
          Glimmer::Config.logger e.full_message
        end      
      }
    }
  end  
  
  def async_await(&operation)
    result = nil
    Thread.new {
      async_exec {
        begin
          result = operation.call
        rescue => e
          Glimmer::Config.logger e.full_message
          result = nil
        end      
      }
    }
    while result.nil?
      sleep(0.01)      
    end
    result  
  end  
end

class Glimmer::SWT::AsyncShellProxy
  include Glimmer::SWT::AsyncProxy

  def open
    async {
      @open = true
      @proxy.swt_widget.set_alpha(255)
      @proxy.visible = true
      @proxy.swt_widget.set_active
      @proxy.swt_widget.set_focus
    }
    Thread.new {
      until !@open || (@heartbeat && (Time.now.utc - @heartbeat) > 1)
        sleep(1)
      end    
      async_exec {
        close if @open && (@heartbeat && (Time.now.utc - @heartbeat) > 1)
      }
    }
  end
  
  def close
    async {
      if @open
        @open = false
        @heartbeat = nil
        @proxy.visible = false
      end
    }
  end
  
  def method_missing(method, *args, &block)
    async_await {
      @proxy&.send(method, *args, &block)
    }
  end
  
  def respond_to?(method, *args, &block)
    async_await {
      @proxy&.respond_to?(method, *args, &block)
    }
  end
end

  
app_shell = timer { |proxy|
  alpha 0 # make invisible so user doesn't see it's preloaded
  on_shell_closed { |event|
    event.doit = false # preventing real closing (just hide instead)
    proxy.visible = false
  }
}
launcher = Glimmer::SWT::AsyncShellProxy.new(app_shell)

Thread.new {
  async_exec {
    app_shell.hide
    require 'drb/drb'

    DRb.start_service("druby://127.0.0.1:12345", launcher)
    puts 'Service is ready.'
  }
}

app_shell.open
app_shell.dispose
DRb.stop_service
